{
  "posts": [
    {
      "title":"Day 3",
      "summary": "Today I learned about a new JavaScript design pattern called the Observer. The observer pattern is kind of like DOM event listeners in the sense that it is used to inform a set of listeners when a specific event happens. That being said, it differs in that any number of objects can subscribe to an ‘event’ and you can specify when the objects are informed that there has been an update.",
      "data": [
        {
          "type": "text",
          "text": "Today I learned about a new JavaScript design pattern called the Observer. The observer pattern is kind of like DOM event listeners in the sense that it is used to inform a set of listeners when a specific event happens. That being said, it differs in that any number of objects can subscribe to an ‘event’ and you can specify when the objects are informed that there has been an update."
        },
        {
          "type": "text",
          "text": "The observer design pattern consists of two components: the subject and the observers. An observer is an object that can subscribe to a subject, whos job is to maintain of list of observers and can notify them when nessessary."
        },
        {
          "type": "text",
          "text": "The implementation of the pattern is pretty easy. Observers are just objects that have a common ‘update’ function but the ‘update’ function is arbitrary and can be called whatever you like:"
        },
        {
          "type": "code",
          "code": "function Observer() {\nthis.update = function(upd) {\n…\n}\n}"
        },
        {
          "type": "text",
          "text": "The subject can be implemented as a list of observers with a function used to update all subscribed observers:"
        },
        {
          "type": "code",
          "code": "function Subject() {\nthis.observers = []\n\nthis.notify = function(upd) {\nfor (let obs of observers)\nobs.update(upd)\n}\n}"
        },
        {
          "type": "text",
          "text": "This is a bare minimum example but it wouldn't be hard to extend it to include more advanced functionality."
        }
      ]
    },
    {
      "title":"Day 2",
      "summary": "Today I learned about UPC++, a distributed computing library for C++ made by Berkley University. The idea of UPC++ is based on partitioned global address spaces. In these spaces computer processors can directly name (by address) memory, and write to, memory inside another processors memory",
      "data": [
        {
          "type": "text",
          "text": "Today I learned about UPC++, a distributed computing library for C++ made by Berkley University. The idea of UPC++ is based on partitioned global address spaces. In these spaces computer processors can directly name (by address) memory, and write to, memory inside another processors memory. "
        },
        {
          "type": "text",
          "text": "In a typical system, two processors would communicate by sending messages where one process would send and another recieves. Using UPC++, a process can write directly to another processes memory using a remote data memory access operation (RDMA) (I think this is similar to direct memory access). A major advantage gained with this system is a reduction in overhead due to lack of a typical send/recieve pattern."
        },
        {
          "type": "text",
          "text": "To show an example, in UPC++, shared memory is allocated explicitly:"
        },
        {
          "type": "code",
          "code": "Global_ptr<int> gptr = upcxx::new_<int>(rank_me());"
        },
        {
          "type": "text",
          "text": "This line allocates a new global integer inside its processors memory which now can be accessed via other processors."
        },
        {
          "type": "text",
          "text": "Very similar to JavaScript, there is no implicit blocking in UPC++ allowing powerful asynchronous calls to global memory. As a result, you can pipeline computations with data accesses with the added benifit of RDMA."
        },
        {
          "type": "text",
          "text": "Asynchronous calls can be made as simple as using:"
        },
        {
          "type": "code",
          "code": "upcxx::future<T> f1 = upcxx::rget(gptr1);"
        },
        {
          "type": "text",
          "text": "To block until the data is available one only needs to call:"
        },
        {
          "type": "code",
          "code": "upcxx:wait(f1)"
        },
        {
          "type": "text",
          "text": "making the syntax easy and accessible."
        }
      ]
    },
    {
      "title":"Day 1",
      "summary": "Today I learned about GitHub pages. Github pages, (what is currently powering this blog) is a service used to serve static content residing on a github repository. I was looking for an easy way of serving a static blog for this learning journal and stumbled across pages.",
      "data": [
        {
          "type": "text",
          "text": "Today I learned about GitHub pages. Github pages, (what is currently powering this blog) is a service used to serve static content residing on a github repository. I was looking for an easy way of serving a static blog for this learning journal and stumbled across pages."
        },
        {
          "type": "text",
          "text": "It was straightforward to setup: all you need to do is create a repository using yourusername.github.io and then create an index.html page in the root directory of the repository. However, I wanted to whip something up using react however so I bootstrapped a small React project using webpack+babel."
        },
        {
          "type": "text",
          "text": "The web content is served by default from your master branch. In order to keep things clean, I created another branch called development to house the react files. I built my bundle.js/index.html files to a dist directory. In order to deploy the site I used `git subtree` to build a sub-branch, (called _website_ ) inside of the dist folder and then I created a deploy script to push the website branch to master."
        },
        {
          "type": "image",
          "url": "./ghpages.png"
        }
      ]
    }
  ]
}
